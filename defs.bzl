# Copyright 2021 BenchSci Analytics Inc. All rights reserved.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



# This shows how you might create macros for the autogenerated rules.

# You should probably not use these rules directly

load("@bazel_skylib//lib:sets.bzl", "sets")
load("@npm//jest:index.bzl", "jest", _jest_test = "jest_test")
load("@npm//@bazel/typescript:index.bzl", _ts_project = "ts_project")

load("//internal:js_library.bzl", _js_library = "js_library")
load("//internal:ts_definition.bzl", _ts_definition = "ts_definition")
load("//internal:web_assets.bzl",  _web_assets = "web_assets")


def js_library(name, srcs, **kwargs):
    """js_library directly maps srcs -> outs, while also providing transitive dependency support
    
    see internal/js_library.bzl
    """
    deps = kwargs.pop("deps", [])
    tags = kwargs.pop("tags", [])
    tags.append("frontend")
    tags.append("manual")
    _js_library(name = name, srcs = srcs, tags = tags, deps = deps, **kwargs)


def ts_definition(name, srcs, **kwargs):
    """ts_definition directly maps srcs -> definitions, for use with ts_project
    
    see internal/ts_definition.bzl
    """
    deps = kwargs.pop("deps", [])
    tags = kwargs.pop("tags", [])
    tags.append("frontend")
    tags.append("manual")
    _ts_definition(name = name, srcs = srcs, tags = tags, deps = deps, **kwargs)


def web_assets(name, srcs, **kwargs):
    """web_assets directly maps srcs -> outs, like a filegroup
    
    see internal/web_assets.bzl
    """
    tags = kwargs.pop("tags", [])
    tags.append("frontend")
    tags.append("manual")
    _web_assets(name = name, srcs = srcs, tags = tags, **kwargs)


def web_asset(name, srcs, **kwargs):
    """web_asset" is the same as "web_assets", but is intended for singletons
    
    this was created because there was some issues generating the ":all_assets
    rules with the same rule Kind
    """
    _web_assets(name = name, srcs = srcs, **kwargs)


def ts_project(name, srcs, **kwargs):
    """this provides defaults to the upstream ts_project rule"""
    deps = kwargs.pop("deps", []) + kwargs.pop("dynamic_deps", [])
    data = kwargs.pop("data", [])
    tags = kwargs.pop("tags", [])
    _ts_project(
        name = name,
        srcs = srcs + data,
        deps = deps,
        tags = tags,
        **kwargs
    )

def jest_test(name, srcs, **kwargs):
    """this provides defaults to the upstream jest_test rule"""
    templated_args = [
        "--no-cache",
        "--no-watchman",
        "--colors",
        "--runInBand",  # Bazel already does parallelization.
        "--verbose",
    ]

    deps = kwargs.pop("deps", [])
    data = kwargs.pop("data", [])
    srcs = srcs + data
    tags = kwargs.pop("tags", [])
    flaky = kwargs.pop("flaky", False)

    _jest_test(
        name = name,
        data = data,
        tags = tags,
        templated_args = templated_args,
        flaky = flaky,
        **kwargs
    )

    # This rule is used specifically to update snapshots via `bazel run`
    jest(
        name = "%s.update" % name,
        data = data,
        tags = tags,
        templated_args = templated_args + ["-u"],
        **kwargs
    )
